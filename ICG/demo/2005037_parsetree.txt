start : program 	<Line: 1-22>
 program : program unit 	<Line: 1-22>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
      ID : w	<Line: 1>
      LSQUARE : [	<Line: 1>
      CONST_INT : 10	<Line: 1>
      RSQUARE : ]	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 2-22>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-22>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 2-22>
     LCURL : {	<Line: 2>
     statements : statements statement 	<Line: 3-21>
      statements : statements statement 	<Line: 3-18>
       statements : statements statement 	<Line: 3-17>
        statements : statements statement 	<Line: 3-16>
         statements : statements statement 	<Line: 3-15>
          statements : statements statement 	<Line: 3-13>
           statements : statements statement 	<Line: 3-12>
            statements : statements statement 	<Line: 3-11>
             statements : statements statement 	<Line: 3-10>
              statements : statements statement 	<Line: 3-9>
               statements : statements statement 	<Line: 3-8>
                statements : statements statement 	<Line: 3-7>
                 statements : statements statement 	<Line: 3-6>
                  statements : statements statement 	<Line: 3-5>
                   statements : statements statement 	<Line: 3-4>
                    statements : statement 	<Line: 3-3>
                     statement : var_declaration 	<Line: 3-3>
                      var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 3-3>
                       type_specifier : INT 	<Line: 3-3>
                        INT : int	<Line: 3>
                       declaration_list : ID 	<Line: 3-3>
                        ID : i	<Line: 3>
                       SEMICOLON : ;	<Line: 3>
                    statement : var_declaration 	<Line: 4-4>
                     var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
                      type_specifier : INT 	<Line: 4-4>
                       INT : int	<Line: 4>
                      declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
                       ID : x	<Line: 4>
                       LSQUARE : [	<Line: 4>
                       CONST_INT : 10	<Line: 4>
                       RSQUARE : ]	<Line: 4>
                      SEMICOLON : ;	<Line: 4>
                   statement : expression_statement 	<Line: 5-5>
                    expression_statement : expression SEMICOLON 	<Line: 5-5>
                     expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
                      variable : ID LSQUARE expression RSQUARE 	<Line: 5-5>
                       ID : w	<Line: 5>
                       LSQUARE : [	<Line: 5>
                       expression : logic_expression 	<Line: 5-5>
                        logic_expression : rel_expression 	<Line: 5-5>
                         rel_expression : simple_expression 	<Line: 5-5>
                          simple_expression : term 	<Line: 5-5>
                           term : unary_expression 	<Line: 5-5>
                            unary_expression : factor 	<Line: 5-5>
                             factor : CONST_INT 	<Line: 5-5>
                              CONST_INT : 0	<Line: 5>
                       RSQUARE : ]	<Line: 5>
                      ASSIGNOP : =	<Line: 5>
                      logic_expression : rel_expression 	<Line: 5-5>
                       rel_expression : simple_expression 	<Line: 5-5>
                        simple_expression : term 	<Line: 5-5>
                         term : unary_expression 	<Line: 5-5>
                          unary_expression : ADDOP unary_expression 	<Line: 5-5>
                           ADDOP : -	<Line: 5>
                           unary_expression : factor 	<Line: 5-5>
                            factor : CONST_INT 	<Line: 5-5>
                             CONST_INT : 2	<Line: 5>
                     SEMICOLON : ;	<Line: 5>
                  statement : expression_statement 	<Line: 6-6>
                   expression_statement : expression SEMICOLON 	<Line: 6-6>
                    expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
                     variable : ID LSQUARE expression RSQUARE 	<Line: 6-6>
                      ID : x	<Line: 6>
                      LSQUARE : [	<Line: 6>
                      expression : logic_expression 	<Line: 6-6>
                       logic_expression : rel_expression 	<Line: 6-6>
                        rel_expression : simple_expression 	<Line: 6-6>
                         simple_expression : term 	<Line: 6-6>
                          term : unary_expression 	<Line: 6-6>
                           unary_expression : factor 	<Line: 6-6>
                            factor : CONST_INT 	<Line: 6-6>
                             CONST_INT : 0	<Line: 6>
                      RSQUARE : ]	<Line: 6>
                     ASSIGNOP : =	<Line: 6>
                     logic_expression : rel_expression 	<Line: 6-6>
                      rel_expression : simple_expression 	<Line: 6-6>
                       simple_expression : term 	<Line: 6-6>
                        term : unary_expression 	<Line: 6-6>
                         unary_expression : factor 	<Line: 6-6>
                          factor : variable 	<Line: 6-6>
                           variable : ID LSQUARE expression RSQUARE 	<Line: 6-6>
                            ID : w	<Line: 6>
                            LSQUARE : [	<Line: 6>
                            expression : logic_expression 	<Line: 6-6>
                             logic_expression : rel_expression 	<Line: 6-6>
                              rel_expression : simple_expression 	<Line: 6-6>
                               simple_expression : term 	<Line: 6-6>
                                term : unary_expression 	<Line: 6-6>
                                 unary_expression : factor 	<Line: 6-6>
                                  factor : CONST_INT 	<Line: 6-6>
                                   CONST_INT : 0	<Line: 6>
                            RSQUARE : ]	<Line: 6>
                    SEMICOLON : ;	<Line: 6>
                 statement : expression_statement 	<Line: 7-7>
                  expression_statement : expression SEMICOLON 	<Line: 7-7>
                   expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
                    variable : ID 	<Line: 7-7>
                     ID : i	<Line: 7>
                    ASSIGNOP : =	<Line: 7>
                    logic_expression : rel_expression 	<Line: 7-7>
                     rel_expression : simple_expression 	<Line: 7-7>
                      simple_expression : term 	<Line: 7-7>
                       term : unary_expression 	<Line: 7-7>
                        unary_expression : factor 	<Line: 7-7>
                         factor : variable 	<Line: 7-7>
                          variable : ID LSQUARE expression RSQUARE 	<Line: 7-7>
                           ID : x	<Line: 7>
                           LSQUARE : [	<Line: 7>
                           expression : logic_expression 	<Line: 7-7>
                            logic_expression : rel_expression 	<Line: 7-7>
                             rel_expression : simple_expression 	<Line: 7-7>
                              simple_expression : term 	<Line: 7-7>
                               term : unary_expression 	<Line: 7-7>
                                unary_expression : factor 	<Line: 7-7>
                                 factor : CONST_INT 	<Line: 7-7>
                                  CONST_INT : 0	<Line: 7>
                           RSQUARE : ]	<Line: 7>
                   SEMICOLON : ;	<Line: 7>
                statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 8-8>
                 PRINTLN : println	<Line: 8>
                 LPAREN : (	<Line: 8>
                 ID : i	<Line: 8>
                 RPAREN : )	<Line: 8>
                 SEMICOLON : ;	<Line: 8>
               statement : expression_statement 	<Line: 9-9>
                expression_statement : expression SEMICOLON 	<Line: 9-9>
                 expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 9-9>
                   ID : x	<Line: 9>
                   LSQUARE : [	<Line: 9>
                   expression : logic_expression 	<Line: 9-9>
                    logic_expression : rel_expression 	<Line: 9-9>
                     rel_expression : simple_expression 	<Line: 9-9>
                      simple_expression : term 	<Line: 9-9>
                       term : unary_expression 	<Line: 9-9>
                        unary_expression : factor 	<Line: 9-9>
                         factor : CONST_INT 	<Line: 9-9>
                          CONST_INT : 1	<Line: 9>
                   RSQUARE : ]	<Line: 9>
                  ASSIGNOP : =	<Line: 9>
                  logic_expression : rel_expression 	<Line: 9-9>
                   rel_expression : simple_expression 	<Line: 9-9>
                    simple_expression : term 	<Line: 9-9>
                     term : unary_expression 	<Line: 9-9>
                      unary_expression : factor 	<Line: 9-9>
                       factor : variable INCOP 	<Line: 9-9>
                        variable : ID LSQUARE expression RSQUARE 	<Line: 9-9>
                         ID : w	<Line: 9>
                         LSQUARE : [	<Line: 9>
                         expression : logic_expression 	<Line: 9-9>
                          logic_expression : rel_expression 	<Line: 9-9>
                           rel_expression : simple_expression 	<Line: 9-9>
                            simple_expression : term 	<Line: 9-9>
                             term : unary_expression 	<Line: 9-9>
                              unary_expression : factor 	<Line: 9-9>
                               factor : CONST_INT 	<Line: 9-9>
                                CONST_INT : 0	<Line: 9>
                         RSQUARE : ]	<Line: 9>
                        INCOP : ++	<Line: 9>
                 SEMICOLON : ;	<Line: 9>
              statement : expression_statement 	<Line: 10-10>
               expression_statement : expression SEMICOLON 	<Line: 10-10>
                expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                 variable : ID 	<Line: 10-10>
                  ID : i	<Line: 10>
                 ASSIGNOP : =	<Line: 10>
                 logic_expression : rel_expression 	<Line: 10-10>
                  rel_expression : simple_expression 	<Line: 10-10>
                   simple_expression : term 	<Line: 10-10>
                    term : unary_expression 	<Line: 10-10>
                     unary_expression : factor 	<Line: 10-10>
                      factor : variable 	<Line: 10-10>
                       variable : ID LSQUARE expression RSQUARE 	<Line: 10-10>
                        ID : x	<Line: 10>
                        LSQUARE : [	<Line: 10>
                        expression : logic_expression 	<Line: 10-10>
                         logic_expression : rel_expression 	<Line: 10-10>
                          rel_expression : simple_expression 	<Line: 10-10>
                           simple_expression : term 	<Line: 10-10>
                            term : unary_expression 	<Line: 10-10>
                             unary_expression : factor 	<Line: 10-10>
                              factor : CONST_INT 	<Line: 10-10>
                               CONST_INT : 1	<Line: 10>
                        RSQUARE : ]	<Line: 10>
                SEMICOLON : ;	<Line: 10>
             statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
              PRINTLN : println	<Line: 11>
              LPAREN : (	<Line: 11>
              ID : i	<Line: 11>
              RPAREN : )	<Line: 11>
              SEMICOLON : ;	<Line: 11>
            statement : expression_statement 	<Line: 12-12>
             expression_statement : expression SEMICOLON 	<Line: 12-12>
              expression : variable ASSIGNOP logic_expression 	<Line: 12-12>
               variable : ID 	<Line: 12-12>
                ID : i	<Line: 12>
               ASSIGNOP : =	<Line: 12>
               logic_expression : rel_expression 	<Line: 12-12>
                rel_expression : simple_expression 	<Line: 12-12>
                 simple_expression : term 	<Line: 12-12>
                  term : unary_expression 	<Line: 12-12>
                   unary_expression : factor 	<Line: 12-12>
                    factor : variable 	<Line: 12-12>
                     variable : ID LSQUARE expression RSQUARE 	<Line: 12-12>
                      ID : w	<Line: 12>
                      LSQUARE : [	<Line: 12>
                      expression : logic_expression 	<Line: 12-12>
                       logic_expression : rel_expression 	<Line: 12-12>
                        rel_expression : simple_expression 	<Line: 12-12>
                         simple_expression : term 	<Line: 12-12>
                          term : unary_expression 	<Line: 12-12>
                           unary_expression : factor 	<Line: 12-12>
                            factor : CONST_INT 	<Line: 12-12>
                             CONST_INT : 0	<Line: 12>
                      RSQUARE : ]	<Line: 12>
              SEMICOLON : ;	<Line: 12>
           statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
            PRINTLN : println	<Line: 13>
            LPAREN : (	<Line: 13>
            ID : i	<Line: 13>
            RPAREN : )	<Line: 13>
            SEMICOLON : ;	<Line: 13>
          statement : expression_statement 	<Line: 15-15>
           expression_statement : expression SEMICOLON 	<Line: 15-15>
            expression : variable ASSIGNOP logic_expression 	<Line: 15-15>
             variable : ID 	<Line: 15-15>
              ID : i	<Line: 15>
             ASSIGNOP : =	<Line: 15>
             logic_expression : rel_expression 	<Line: 15-15>
              rel_expression : simple_expression 	<Line: 15-15>
               simple_expression : simple_expression ADDOP term 	<Line: 15-15>
                simple_expression : term 	<Line: 15-15>
                 term : unary_expression 	<Line: 15-15>
                  unary_expression : factor 	<Line: 15-15>
                   factor : variable 	<Line: 15-15>
                    variable : ID 	<Line: 15-15>
                     ID : i	<Line: 15>
                ADDOP : +	<Line: 15>
                term : unary_expression 	<Line: 15-15>
                 unary_expression : factor 	<Line: 15-15>
                  factor : CONST_INT 	<Line: 15-15>
                   CONST_INT : 0	<Line: 15>
            SEMICOLON : ;	<Line: 15>
         statement : expression_statement 	<Line: 16-16>
          expression_statement : expression SEMICOLON 	<Line: 16-16>
           expression : variable ASSIGNOP logic_expression 	<Line: 16-16>
            variable : ID 	<Line: 16-16>
             ID : i	<Line: 16>
            ASSIGNOP : =	<Line: 16>
            logic_expression : rel_expression 	<Line: 16-16>
             rel_expression : simple_expression 	<Line: 16-16>
              simple_expression : simple_expression ADDOP term 	<Line: 16-16>
               simple_expression : term 	<Line: 16-16>
                term : unary_expression 	<Line: 16-16>
                 unary_expression : factor 	<Line: 16-16>
                  factor : variable 	<Line: 16-16>
                   variable : ID 	<Line: 16-16>
                    ID : i	<Line: 16>
               ADDOP : -	<Line: 16>
               term : unary_expression 	<Line: 16-16>
                unary_expression : factor 	<Line: 16-16>
                 factor : CONST_INT 	<Line: 16-16>
                  CONST_INT : 0	<Line: 16>
           SEMICOLON : ;	<Line: 16>
        statement : expression_statement 	<Line: 17-17>
         expression_statement : expression SEMICOLON 	<Line: 17-17>
          expression : variable ASSIGNOP logic_expression 	<Line: 17-17>
           variable : ID 	<Line: 17-17>
            ID : i	<Line: 17>
           ASSIGNOP : =	<Line: 17>
           logic_expression : rel_expression 	<Line: 17-17>
            rel_expression : simple_expression 	<Line: 17-17>
             simple_expression : term 	<Line: 17-17>
              term : term MULOP unary_expression 	<Line: 17-17>
               term : unary_expression 	<Line: 17-17>
                unary_expression : factor 	<Line: 17-17>
                 factor : variable 	<Line: 17-17>
                  variable : ID 	<Line: 17-17>
                   ID : i	<Line: 17>
               MULOP : *	<Line: 17>
               unary_expression : factor 	<Line: 17-17>
                factor : CONST_INT 	<Line: 17-17>
                 CONST_INT : 1	<Line: 17>
          SEMICOLON : ;	<Line: 17>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 18-18>
        PRINTLN : println	<Line: 18>
        LPAREN : (	<Line: 18>
        ID : i	<Line: 18>
        RPAREN : )	<Line: 18>
        SEMICOLON : ;	<Line: 18>
      statement : RETURN expression SEMICOLON 	<Line: 21-21>
       RETURN : return	<Line: 21>
       expression : logic_expression 	<Line: 21-21>
        logic_expression : rel_expression 	<Line: 21-21>
         rel_expression : simple_expression 	<Line: 21-21>
          simple_expression : term 	<Line: 21-21>
           term : unary_expression 	<Line: 21-21>
            unary_expression : factor 	<Line: 21-21>
             factor : CONST_INT 	<Line: 21-21>
              CONST_INT : 0	<Line: 21>
       SEMICOLON : ;	<Line: 21>
     RCURL : }	<Line: 22>
