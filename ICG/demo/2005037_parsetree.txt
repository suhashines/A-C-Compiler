start : program 	<Line: 1-14>
 program : unit 	<Line: 1-14>
  unit : func_definition 	<Line: 1-14>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-14>
    type_specifier : INT 	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-14>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 2-12>
      statements : statements statement 	<Line: 2-10>
       statements : statements statement 	<Line: 2-5>
        statements : statements statement 	<Line: 2-4>
         statements : statement 	<Line: 2-2>
          statement : var_declaration 	<Line: 2-2>
           var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
            type_specifier : INT 	<Line: 2-2>
             INT : int	<Line: 2>
            declaration_list : declaration_list COMMA ID 	<Line: 2-2>
             declaration_list : declaration_list COMMA ID 	<Line: 2-2>
              declaration_list : declaration_list COMMA ID 	<Line: 2-2>
               declaration_list : ID 	<Line: 2-2>
                ID : i	<Line: 2>
               COMMA : ,	<Line: 2>
               ID : j	<Line: 2>
              COMMA : ,	<Line: 2>
              ID : k	<Line: 2>
             COMMA : ,	<Line: 2>
             ID : ll	<Line: 2>
            SEMICOLON : ;	<Line: 2>
         statement : expression_statement 	<Line: 4-4>
          expression_statement : expression SEMICOLON 	<Line: 4-4>
           expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
            variable : ID 	<Line: 4-4>
             ID : k	<Line: 4>
            ASSIGNOP : =	<Line: 4>
            logic_expression : rel_expression 	<Line: 4-4>
             rel_expression : simple_expression 	<Line: 4-4>
              simple_expression : term 	<Line: 4-4>
               term : unary_expression 	<Line: 4-4>
                unary_expression : factor 	<Line: 4-4>
                 factor : CONST_INT 	<Line: 4-4>
                  CONST_INT : 4	<Line: 4>
           SEMICOLON : ;	<Line: 4>
        statement : expression_statement 	<Line: 5-5>
         expression_statement : expression SEMICOLON 	<Line: 5-5>
          expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
           variable : ID 	<Line: 5-5>
            ID : ll	<Line: 5>
           ASSIGNOP : =	<Line: 5>
           logic_expression : rel_expression 	<Line: 5-5>
            rel_expression : simple_expression 	<Line: 5-5>
             simple_expression : term 	<Line: 5-5>
              term : unary_expression 	<Line: 5-5>
               unary_expression : factor 	<Line: 5-5>
                factor : CONST_INT 	<Line: 5-5>
                 CONST_INT : 6	<Line: 5>
          SEMICOLON : ;	<Line: 5>
       statement : WHILE LPAREN expression RPAREN statement 	<Line: 7-10>
        WHILE : while	<Line: 7>
        LPAREN : (	<Line: 7>
        expression : logic_expression 	<Line: 7-7>
         logic_expression : rel_expression 	<Line: 7-7>
          rel_expression : simple_expression RELOP simple_expression 	<Line: 7-7>
           simple_expression : term 	<Line: 7-7>
            term : unary_expression 	<Line: 7-7>
             unary_expression : factor 	<Line: 7-7>
              factor : variable 	<Line: 7-7>
               variable : ID 	<Line: 7-7>
                ID : k	<Line: 7>
           RELOP : >	<Line: 7>
           simple_expression : term 	<Line: 7-7>
            term : unary_expression 	<Line: 7-7>
             unary_expression : factor 	<Line: 7-7>
              factor : CONST_INT 	<Line: 7-7>
               CONST_INT : 0	<Line: 7>
        RPAREN : )	<Line: 7>
        statement : compound_statement 	<Line: 7-10>
         compound_statement : LCURL statements RCURL 	<Line: 7-10>
          LCURL : {	<Line: 7>
          statements : statements statement 	<Line: 8-9>
           statements : statement 	<Line: 8-8>
            statement : expression_statement 	<Line: 8-8>
             expression_statement : expression SEMICOLON 	<Line: 8-8>
              expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
               variable : ID 	<Line: 8-8>
                ID : ll	<Line: 8>
               ASSIGNOP : =	<Line: 8>
               logic_expression : rel_expression 	<Line: 8-8>
                rel_expression : simple_expression 	<Line: 8-8>
                 simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                  simple_expression : term 	<Line: 8-8>
                   term : unary_expression 	<Line: 8-8>
                    unary_expression : factor 	<Line: 8-8>
                     factor : variable 	<Line: 8-8>
                      variable : ID 	<Line: 8-8>
                       ID : ll	<Line: 8>
                  ADDOP : +	<Line: 8>
                  term : unary_expression 	<Line: 8-8>
                   unary_expression : factor 	<Line: 8-8>
                    factor : CONST_INT 	<Line: 8-8>
                     CONST_INT : 3	<Line: 8>
              SEMICOLON : ;	<Line: 8>
           statement : expression_statement 	<Line: 9-9>
            expression_statement : expression SEMICOLON 	<Line: 9-9>
             expression : logic_expression 	<Line: 9-9>
              logic_expression : rel_expression 	<Line: 9-9>
               rel_expression : simple_expression 	<Line: 9-9>
                simple_expression : term 	<Line: 9-9>
                 term : unary_expression 	<Line: 9-9>
                  unary_expression : factor 	<Line: 9-9>
                   factor : variable DECOP 	<Line: 9-9>
                    variable : ID 	<Line: 9-9>
                     ID : k	<Line: 9>
                    DECOP : --	<Line: 9>
             SEMICOLON : ;	<Line: 9>
          RCURL : }	<Line: 10>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 12-12>
       PRINTLN : println	<Line: 12>
       LPAREN : (	<Line: 12>
       ID : ll	<Line: 12>
       RPAREN : )	<Line: 12>
       SEMICOLON : ;	<Line: 12>
     RCURL : }	<Line: 14>
