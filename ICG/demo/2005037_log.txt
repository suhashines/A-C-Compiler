Line# 1: Token <INT> Lexeme int found
type_specifier : INT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 1: Token <ID> Lexeme c found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : unit 
Line# 3: Token <VOID> Lexeme void found
type_specifier : VOID 
Line# 3: Token <ID> Lexeme func_a found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <INT> Lexeme int found
type_specifier : INT 
Line# 3: Token <ID> Lexeme l found
parameter_list : type_specifier ID 
Line# 3: Token <COMMA> Lexeme , found
Line# 3: Token <INT> Lexeme int found
type_specifier : INT 
Line# 3: Token <ID> Lexeme k found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 3: Token <COMMA> Lexeme , found
Line# 3: Token <INT> Lexeme int found
type_specifier : INT 
Line# 3: Token <ID> Lexeme o found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <ID> Lexeme o found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 4: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 5: Token <ID> Lexeme k found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 5: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 6: Token <ID> Lexeme l found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 6: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 7: Token <INT> Lexeme int found
type_specifier : INT 
Line# 7: Token <ID> Lexeme m found
Line# 7: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 8: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 9: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	2--> <o,INT> 
	9--> <k,INT> 
	10--> <l,INT> 
	11--> <m,INT> 
	ScopeTable# 1
	1--> <c,INT> 
	10--> <a,INT> 
	11--> <b,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 11: Token <INT> Lexeme int found
type_specifier : INT 
Line# 11: Token <ID> Lexeme main found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <LCURL> Lexeme { found
Line# 13: Token <ID> Lexeme func_a found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <ID> Lexeme a found
Line# 13: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 13: Token <ID> Lexeme b found
Line# 13: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
Line# 13: Token <ID> Lexeme c found
Line# 13: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 13: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	ScopeTable# 1
	1--> <c,INT> 
	10--> <a,INT> 
	11--> <b,INT> <func_a,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
Total Lines: 15
Total Errors: 0
