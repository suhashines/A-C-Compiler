start : program 	<Line : 1-9>
 program : program unit 	<Line : 1-9>
  program : program unit 	<Line : 1-5>
   program : program unit 	<Line : 1-3>
    program : program unit 	<Line : 1-1>
     program : unit 	<Line : 1-1>
      unit : var_declaration 	<Line : 1-1>
       var_declaration : type_specifier declaration_list SEMICOLON 	<Line : 1-1>
        type_specifier : INT 	<Line : 1-1>
         INT : int	<Line : 1>
        declaration_list : declaration_list COMMA ID 	<Line : 1-1>
         declaration_list : declaration_list COMMA ID 	<Line : 1-1>
          declaration_list : ID 	<Line : 1-1>
           ID : x	<Line : 1>
          COMMA : ,	<Line : 1>
          ID : y	<Line : 1>
         COMMA : ,	<Line : 1>
         ID : z	<Line : 1>
        SEMICOLON : ;	<Line : 1>
     unit : var_declaration 	<Line : 1-1>
      var_declaration : type_specifier declaration_list SEMICOLON 	<Line : 1-1>
       type_specifier : FLOAT 	<Line : 1-1>
        FLOAT : float	<Line : 1>
       declaration_list : ID 	<Line : 1-1>
        ID : a	<Line : 1>
       SEMICOLON : ;	<Line : 1>
    unit : func_declaration 	<Line : 3-3>
     func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 	<Line : 3-3>
      type_specifier : INT 	<Line : 3-3>
       INT : int	<Line : 3>
      ID : var	<Line : 3>
      LPAREN : (	<Line : 3>
      parameter_list : parameter_list COMMA type_specifier ID 	<Line : 3-3>
       parameter_list : type_specifier ID 	<Line : 3-3>
        type_specifier : INT 	<Line : 3-3>
         INT : int	<Line : 3>
        ID : a	<Line : 3>
       COMMA : ,	<Line : 3>
       type_specifier : INT 	<Line : 3-3>
        INT : int	<Line : 3>
       ID : b	<Line : 3>
      RPAREN : )	<Line : 3>
      SEMICOLON : ;	<Line : 3>
   unit : func_declaration 	<Line : 5-5>
    func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 	<Line : 5-5>
     type_specifier : INT 	<Line : 5-5>
      INT : int	<Line : 5>
     ID : foo3	<Line : 5>
     LPAREN : (	<Line : 5>
     parameter_list : parameter_list COMMA type_specifier ID 	<Line : 5-5>
      parameter_list : type_specifier ID 	<Line : 5-5>
       type_specifier : INT 	<Line : 5-5>
        INT : int	<Line : 5>
       ID : a	<Line : 5>
      COMMA : ,	<Line : 5>
      type_specifier : INT 	<Line : 5-5>
       INT : int	<Line : 5>
      ID : b	<Line : 5>
     RPAREN : )	<Line : 5>
     SEMICOLON : ;	<Line : 5>
  unit : func_definition 	<Line : 7-9>
   func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line : 7-9>
    type_specifier : INT 	<Line : 7-7>
     INT : int	<Line : 7>
    ID : func	<Line : 7>
    LPAREN : (	<Line : 7>
    parameter_list : parameter_list COMMA type_specifier ID 	<Line : 7-7>
     parameter_list : type_specifier ID 	<Line : 7-7>
      type_specifier : INT 	<Line : 7-7>
       INT : int	<Line : 7>
      ID : c	<Line : 7>
     COMMA : ,	<Line : 7>
     type_specifier : INT 	<Line : 7-7>
      INT : int	<Line : 7>
     ID : d	<Line : 7>
    RPAREN : )	<Line : 7>
    compound_statement : LCURL statements RCURL 	<Line : 7-9>
     LCURL : {	<Line : 7>
     statements : statement 	<Line : 8-8>
      statement : RETURN expression SEMICOLON 	<Line : 8-8>
       RETURN : return	<Line : 8>
       expression : logic_expression 	<Line : 8-8>
        logic_expression : rel_expression 	<Line : 8-8>
         rel_expression : simple_expression 	<Line : 8-8>
          simple_expression : term 	<Line : 8-8>
           term : unary_expression 	<Line : 8-8>
            unary_expression : factor 	<Line : 8-8>
             factor : CONST_INT 	<Line : 8-8>
              CONST_INT : 7	<Line : 8>
       SEMICOLON : ;	<Line : 8>
     RCURL : }	<Line : 9>
