Line# 1: Token <INT> Lexeme int found
type_specifier : INT 
Line# 1: Token <ID> Lexeme f found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier : INT 
Line# 1: Token <ID> Lexeme a found
parameter_list : type_specifier ID 
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT 
Line# 2: Token <ID> Lexeme k found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 3: Token <ID> Lexeme k found
Line# 3: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 3: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 4: Token <WHILE> Lexeme while found
Line# 4: Token <LPAREN> Lexeme ( found
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <RELOP> Lexeme > found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 4: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 4: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 4: Token <LCURL> Lexeme { found
Line# 5: Token <ID> Lexeme a found
Line# 5: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 6: Token <ID> Lexeme k found
Line# 6: Token <DECOP> Lexeme -- found
variable : ID 
factor : variable DECOP 
unary_expression : factor 
term : unary_expression 
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 7: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	10--> <a,INT> 
	ScopeTable# 2
	9--> <k,INT> 
	10--> <a,INT> 
	ScopeTable# 1
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statements statement 
Line# 8: Token <RETURN> Lexeme return found
Line# 8: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <MULOP> Lexeme * found
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : term 
Line# 8: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 9: Token <CONST_INT> Lexeme 9 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 1
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : unit 
Line# 12: Token <INT> Lexeme int found
type_specifier : INT 
Line# 12: Token <ID> Lexeme g found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <INT> Lexeme int found
type_specifier : INT 
Line# 12: Token <ID> Lexeme a found
parameter_list : type_specifier ID 
Line# 12: Token <COMMA> Lexeme , found
Line# 12: Token <INT> Lexeme int found
type_specifier : INT 
Line# 12: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID 
Line# 12: Token <RPAREN> Lexeme ) found
Line# 12: Token <LCURL> Lexeme { found
Line# 14: Token <INT> Lexeme int found
type_specifier : INT 
Line# 14: Token <ID> Lexeme x found
Line# 14: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 14: Token <ID> Lexeme i found
Line# 14: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 15: Token <ID> Lexeme x found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 15: Token <ID> Lexeme f found
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
Line# 15: Token <ID> Lexeme b found
Line# 15: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 17: Token <FOR> Lexeme for found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 17: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 17: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 17: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 17: Token <LCURL> Lexeme { found
Line# 18: Token <IF> Lexeme if found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme i found
Line# 18: Token <MULOP> Lexeme % found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
Line# 18: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 18: Token <RELOP> Lexeme == found
simple_expression : term 
Line# 18: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 18: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 18: Token <LCURL> Lexeme { found
Line# 19: Token <ID> Lexeme x found
Line# 19: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 19: Token <ID> Lexeme x found
Line# 19: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 19: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 19: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 20: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 5
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 4
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 3
	7--> <i,INT> 
	10--> <a,INT> 
	11--> <b,INT> <x,INT> 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
statement : compound_statement 
Line# 21: Token <ELSE> Lexeme else found
Line# 21: Token <LCURL> Lexeme { found
Line# 22: Token <ID> Lexeme x found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 22: Token <ID> Lexeme x found
Line# 22: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 22: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 22: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 23: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 5
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 3
	7--> <i,INT> 
	10--> <a,INT> 
	11--> <b,INT> <x,INT> 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
statement : compound_statement 
statement : IF LAPAREN expression RPAREN statement ELSE statement 
statements : statement 
Line# 24: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 26: Token <RETURN> Lexeme return found
Line# 26: Token <ID> Lexeme x found
Line# 26: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 27: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 29: Token <INT> Lexeme int found
type_specifier : INT 
Line# 29: Token <ID> Lexeme main found
Line# 29: Token <LPAREN> Lexeme ( found
Line# 29: Token <RPAREN> Lexeme ) found
Line# 29: Token <LCURL> Lexeme { found
Line# 30: Token <INT> Lexeme int found
type_specifier : INT 
Line# 30: Token <ID> Lexeme a found
Line# 30: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 30: Token <ID> Lexeme b found
Line# 30: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID 
Line# 30: Token <ID> Lexeme i found
Line# 30: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 31: Token <ID> Lexeme a found
Line# 31: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 31: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 31: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 32: Token <ID> Lexeme b found
Line# 32: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 32: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 32: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 33: Token <ID> Lexeme a found
Line# 33: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 33: Token <ID> Lexeme g found
Line# 33: Token <LPAREN> Lexeme ( found
Line# 33: Token <ID> Lexeme a found
Line# 33: Token <COMMA> Lexeme , found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
Line# 33: Token <ID> Lexeme b found
Line# 33: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : arguments COMMA logic_expression 
argument_list : arguments 
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 33: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 34: Token <PRINTLN> Lexeme println found
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme a found
Line# 34: Token <RPAREN> Lexeme ) found
Line# 34: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 35: Token <FOR> Lexeme for found
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <ID> Lexeme i found
Line# 35: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 35: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 35: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
Line# 35: Token <ID> Lexeme i found
Line# 35: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 35: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 35: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
Line# 35: Token <ID> Lexeme i found
Line# 35: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 35: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 35: Token <LCURL> Lexeme { found
Line# 36: Token <ID> Lexeme a found
Line# 36: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 36: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 36: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 37: Token <WHILE> Lexeme while found
Line# 37: Token <LPAREN> Lexeme ( found
Line# 37: Token <ID> Lexeme a found
Line# 37: Token <RELOP> Lexeme > found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 37: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 37: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 37: Token <LCURL> Lexeme { found
Line# 38: Token <ID> Lexeme b found
Line# 38: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 38: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 39: Token <ID> Lexeme a found
Line# 39: Token <DECOP> Lexeme -- found
variable : ID 
factor : variable DECOP 
unary_expression : factor 
term : unary_expression 
Line# 39: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 40: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 6
	ScopeTable# 5
	ScopeTable# 4
	7--> <i,INT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statements statement 
Line# 41: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 4
	7--> <i,INT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement 
Line# 42: Token <PRINTLN> Lexeme println found
Line# 42: Token <LPAREN> Lexeme ( found
Line# 42: Token <ID> Lexeme a found
Line# 42: Token <RPAREN> Lexeme ) found
Line# 42: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 43: Token <PRINTLN> Lexeme println found
Line# 43: Token <LPAREN> Lexeme ( found
Line# 43: Token <ID> Lexeme b found
Line# 43: Token <RPAREN> Lexeme ) found
Line# 43: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 44: Token <PRINTLN> Lexeme println found
Line# 44: Token <LPAREN> Lexeme ( found
Line# 44: Token <ID> Lexeme i found
Line# 44: Token <RPAREN> Lexeme ) found
Line# 44: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 45: Token <RETURN> Lexeme return found
Line# 45: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 45: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 46: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 1
	4--> <f,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
Total Lines: 47
Total Errors: 13
