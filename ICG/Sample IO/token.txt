<INT, int>
<ID, a>
<COMMA, ,>
<ID, arr>
<LSQUARE, [>
<CONST_INT, 5>
<RSQUARE, ]>
<SEMICOLON, ;>
<INT, int>
<ID, f>
<LPAREN, (>
<INT, int>
<ID, a>
<COMMA, ,>
<INT, int>
<ID, b>
<COMMA, ,>
<INT, int>
<ID, c>
<RPAREN, )>
<LCURL, {>
<PRINTLN, println>
<LPAREN, (>
<ID, a>
<RPAREN, )>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, b>
<RPAREN, )>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, c>
<RPAREN, )>
<SEMICOLON, ;>
<ID, arr>
<LSQUARE, [>
<CONST_INT, 1>
<RSQUARE, ]>
<ASSIGNOP, =>
<CONST_INT, 441>
<SEMICOLON, ;>
<ID, arr>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<ASSIGNOP, =>
<CONST_INT, 555>
<SEMICOLON, ;>
<ID, b>
<ASSIGNOP, =>
<ID, arr>
<LSQUARE, [>
<CONST_INT, 1>
<RSQUARE, ]>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, b>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<ID, arr>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, recursive>
<LPAREN, (>
<INT, int>
<ID, n>
<RPAREN, )>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, n>
<RELOP, ==>
<CONST_INT, 1>
<RPAREN, )>
<RETURN, return>
<CONST_INT, 1>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, n>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<RETURN, return>
<ID, recursive>
<LPAREN, (>
<ID, n>
<ADDOP, ->
<CONST_INT, 1>
<RPAREN, )>
<ADDOP, +>
<ID, recursive>
<LPAREN, (>
<ID, n>
<ADDOP, ->
<CONST_INT, 2>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, v>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<ID, a>
<ASSIGNOP, =>
<CONST_INT, 3>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, a>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, a>
<SEMICOLON, ;>
<ID, a>
<ASSIGNOP, =>
<CONST_INT, 1>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, a>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<PRINTLN, println>
<LPAREN, (>
<ID, a>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, i>
<COMMA, ,>
<ID, j>
<COMMA, ,>
<ID, k>
<COMMA, ,>
<ID, a>
<COMMA, ,>
<ID, array>
<LSQUARE, [>
<CONST_INT, 5>
<RSQUARE, ]>
<SEMICOLON, ;>
<ID, a>
<ASSIGNOP, =>
<CONST_INT, 5>
<SEMICOLON, ;>
<ID, v>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, a>
<RPAREN, )>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<CONST_INT, 5>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, array>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, i>
<ADDOP, +>
<CONST_INT, 1>
<SEMICOLON, ;>
<RCURL, }>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 4>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, i>
<DECOP, -->
<RPAREN, )>
<LCURL, {>
<ID, j>
<ASSIGNOP, =>
<ID, array>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, k>
<ASSIGNOP, =>
<CONST_INT, 2>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, k>
<RELOP, >>
<CONST_INT, 0>
<RPAREN, )>
<ID, k>
<INCOP, ++>
<SEMICOLON, ;>
<ELSE, else>
<ID, k>
<DECOP, -->
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ADDOP, ->
<CONST_INT, 2>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, k>
<RELOP, <>
<CONST_INT, 0>
<RPAREN, )>
<ID, k>
<INCOP, ++>
<SEMICOLON, ;>
<ELSE, else>
<ID, k>
<DECOP, -->
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<CONST_INT, 121>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ADDOP, ->
<ID, k>
<SEMICOLON, ;>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 5>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ID, i>
<ADDOP, +>
<ID, k>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ADDOP, ->
<CONST_INT, 4>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ID, k>
<MULOP, *>
<CONST_INT, 4>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<CONST_INT, 19>
<SEMICOLON, ;>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 4>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ID, j>
<MULOP, />
<ID, i>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ID, j>
<MULOP, %>
<ID, i>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ID, f>
<LPAREN, (>
<CONST_INT, 111>
<COMMA, ,>
<CONST_INT, 222>
<COMMA, ,>
<CONST_INT, 333>
<RPAREN, )>
<ADDOP, ->
<CONST_INT, 444>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<ID, recursive>
<LPAREN, (>
<CONST_INT, 5>
<RPAREN, )>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, k>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<CONST_INT, 2>
<SEMICOLON, ;>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 1>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<ID, i>
<LOGICOP, ||>
<ID, k>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<ID, i>
<LOGICOP, &&>
<ID, k>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<ID, k>
<ASSIGNOP, =>
<CONST_INT, 2>
<SEMICOLON, ;>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<ID, i>
<LOGICOP, ||>
<ID, k>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<ID, i>
<LOGICOP, &&>
<ID, k>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<LOGICOP, !>
<ID, k>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<LOGICOP, !>
<ID, j>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<CONST_INT, 12>
<ADDOP, +>
<CONST_INT, 2>
<MULOP, />
<CONST_INT, 89>
<MULOP, %>
<LPAREN, (>
<CONST_INT, 3>
<ADDOP, ->
<CONST_INT, 33>
<ADDOP, +>
<CONST_INT, 64>
<MULOP, *>
<CONST_INT, 2>
<RPAREN, )>
<ADDOP, ->
<CONST_INT, 3>
<ADDOP, +>
<LPAREN, (>
<CONST_INT, 3>
<ADDOP, +>
<CONST_INT, 59>
<MULOP, />
<CONST_INT, 9>
<MULOP, *>
<CONST_INT, 2>
<ADDOP, ->
<CONST_INT, 4>
<RPAREN, )>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
