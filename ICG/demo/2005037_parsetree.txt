start : program 	<Line: 1-15>
 program : program unit 	<Line: 1-15>
  program : program unit 	<Line: 1-9>
   program : unit 	<Line: 1-1>
    unit : var_declaration 	<Line: 1-1>
     var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
      type_specifier : INT 	<Line: 1-1>
       INT : int	<Line: 1>
      declaration_list : declaration_list COMMA ID 	<Line: 1-1>
       declaration_list : declaration_list COMMA ID 	<Line: 1-1>
        declaration_list : ID 	<Line: 1-1>
         ID : a	<Line: 1>
        COMMA : ,	<Line: 1>
        ID : b	<Line: 1>
       COMMA : ,	<Line: 1>
       ID : c	<Line: 1>
      SEMICOLON : ;	<Line: 1>
   unit : func_definition 	<Line: 3-9>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 3-9>
     type_specifier : VOID 	<Line: 3-3>
      VOID : void	<Line: 3>
     ID : func_a	<Line: 3>
     LPAREN : (	<Line: 3>
     parameter_list : parameter_list COMMA type_specifier ID 	<Line: 3-3>
      parameter_list : parameter_list COMMA type_specifier ID 	<Line: 3-3>
       parameter_list : type_specifier ID 	<Line: 3-3>
        type_specifier : INT 	<Line: 3-3>
         INT : int	<Line: 3>
        ID : l	<Line: 3>
       COMMA : ,	<Line: 3>
       type_specifier : INT 	<Line: 3-3>
        INT : int	<Line: 3>
       ID : k	<Line: 3>
      COMMA : ,	<Line: 3>
      type_specifier : INT 	<Line: 3-3>
       INT : int	<Line: 3>
      ID : o	<Line: 3>
     RPAREN : )	<Line: 3>
     compound_statement : LCURL statements RCURL 	<Line: 3-9>
      LCURL : {	<Line: 3>
      statements : statements statement 	<Line: 4-8>
       statements : statements statement 	<Line: 4-7>
        statements : statements statement 	<Line: 4-6>
         statements : statements statement 	<Line: 4-5>
          statements : statement 	<Line: 4-4>
           statement : expression_statement 	<Line: 4-4>
            expression_statement : expression SEMICOLON 	<Line: 4-4>
             expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
              variable : ID 	<Line: 4-4>
               ID : o	<Line: 4>
              ASSIGNOP : =	<Line: 4>
              logic_expression : rel_expression 	<Line: 4-4>
               rel_expression : simple_expression 	<Line: 4-4>
                simple_expression : term 	<Line: 4-4>
                 term : unary_expression 	<Line: 4-4>
                  unary_expression : factor 	<Line: 4-4>
                   factor : CONST_INT 	<Line: 4-4>
                    CONST_INT : 1	<Line: 4>
             SEMICOLON : ;	<Line: 4>
          statement : expression_statement 	<Line: 5-5>
           expression_statement : expression SEMICOLON 	<Line: 5-5>
            expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
             variable : ID 	<Line: 5-5>
              ID : k	<Line: 5>
             ASSIGNOP : =	<Line: 5>
             logic_expression : rel_expression 	<Line: 5-5>
              rel_expression : simple_expression 	<Line: 5-5>
               simple_expression : term 	<Line: 5-5>
                term : unary_expression 	<Line: 5-5>
                 unary_expression : factor 	<Line: 5-5>
                  factor : CONST_INT 	<Line: 5-5>
                   CONST_INT : 5	<Line: 5>
            SEMICOLON : ;	<Line: 5>
         statement : expression_statement 	<Line: 6-6>
          expression_statement : expression SEMICOLON 	<Line: 6-6>
           expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
            variable : ID 	<Line: 6-6>
             ID : l	<Line: 6>
            ASSIGNOP : =	<Line: 6>
            logic_expression : rel_expression 	<Line: 6-6>
             rel_expression : simple_expression 	<Line: 6-6>
              simple_expression : term 	<Line: 6-6>
               term : unary_expression 	<Line: 6-6>
                unary_expression : factor 	<Line: 6-6>
                 factor : CONST_INT 	<Line: 6-6>
                  CONST_INT : 3	<Line: 6>
           SEMICOLON : ;	<Line: 6>
        statement : var_declaration 	<Line: 7-7>
         var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 7-7>
          type_specifier : INT 	<Line: 7-7>
           INT : int	<Line: 7>
          declaration_list : ID 	<Line: 7-7>
           ID : m	<Line: 7>
          SEMICOLON : ;	<Line: 7>
       statement : expression_statement 	<Line: 8-8>
        expression_statement : expression SEMICOLON 	<Line: 8-8>
         expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
          variable : ID 	<Line: 8-8>
           ID : a	<Line: 8>
          ASSIGNOP : =	<Line: 8>
          logic_expression : rel_expression 	<Line: 8-8>
           rel_expression : simple_expression 	<Line: 8-8>
            simple_expression : term 	<Line: 8-8>
             term : unary_expression 	<Line: 8-8>
              unary_expression : factor 	<Line: 8-8>
               factor : CONST_INT 	<Line: 8-8>
                CONST_INT : 7	<Line: 8>
         SEMICOLON : ;	<Line: 8>
      RCURL : }	<Line: 9>
  unit : func_definition 	<Line: 11-15>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 11-15>
    type_specifier : INT 	<Line: 11-11>
     INT : int	<Line: 11>
    ID : main	<Line: 11>
    LPAREN : (	<Line: 11>
    RPAREN : )	<Line: 11>
    compound_statement : LCURL statements RCURL 	<Line: 11-15>
     LCURL : {	<Line: 11>
     statements : statement 	<Line: 13-13>
      statement : expression_statement 	<Line: 13-13>
       expression_statement : expression SEMICOLON 	<Line: 13-13>
        expression : logic_expression 	<Line: 13-13>
         logic_expression : rel_expression 	<Line: 13-13>
          rel_expression : simple_expression 	<Line: 13-13>
           simple_expression : term 	<Line: 13-13>
            term : unary_expression 	<Line: 13-13>
             unary_expression : factor 	<Line: 13-13>
              factor : ID LPAREN argument_list RPAREN 	<Line: 13-13>
               ID : func_a	<Line: 13>
               LPAREN : (	<Line: 13>
               argument_list : arguments 	<Line: 13-13>
                arguments : arguments COMMA logic_expression 	<Line: 13-13>
                 arguments : arguments COMMA logic_expression 	<Line: 13-13>
                  arguments : logic_expression 	<Line: 13-13>
                   logic_expression : rel_expression 	<Line: 13-13>
                    rel_expression : simple_expression 	<Line: 13-13>
                     simple_expression : term 	<Line: 13-13>
                      term : unary_expression 	<Line: 13-13>
                       unary_expression : factor 	<Line: 13-13>
                        factor : variable 	<Line: 13-13>
                         variable : ID 	<Line: 13-13>
                          ID : a	<Line: 13>
                  COMMA : ,	<Line: 13>
                  logic_expression : rel_expression 	<Line: 13-13>
                   rel_expression : simple_expression 	<Line: 13-13>
                    simple_expression : term 	<Line: 13-13>
                     term : unary_expression 	<Line: 13-13>
                      unary_expression : factor 	<Line: 13-13>
                       factor : variable 	<Line: 13-13>
                        variable : ID 	<Line: 13-13>
                         ID : b	<Line: 13>
                 COMMA : ,	<Line: 13>
                 logic_expression : rel_expression 	<Line: 13-13>
                  rel_expression : simple_expression 	<Line: 13-13>
                   simple_expression : term 	<Line: 13-13>
                    term : unary_expression 	<Line: 13-13>
                     unary_expression : factor 	<Line: 13-13>
                      factor : variable 	<Line: 13-13>
                       variable : ID 	<Line: 13-13>
                        ID : c	<Line: 13>
               RPAREN : )	<Line: 13>
        SEMICOLON : ;	<Line: 13>
     RCURL : }	<Line: 15>
