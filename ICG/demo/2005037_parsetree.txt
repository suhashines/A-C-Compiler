start : program 	<Line: 1-13>
 program : unit 	<Line: 1-13>
  unit : func_definition 	<Line: 1-13>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-13>
    type_specifier : INT 	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-13>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 2-12>
      statements : statements statement 	<Line: 2-11>
       statements : statements statement 	<Line: 2-10>
        statements : statements statement 	<Line: 2-6>
         statements : statements statement 	<Line: 2-5>
          statements : statements statement 	<Line: 2-4>
           statements : statement 	<Line: 2-2>
            statement : var_declaration 	<Line: 2-2>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
              type_specifier : INT 	<Line: 2-2>
               INT : int	<Line: 2>
              declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 2-2>
               declaration_list : declaration_list COMMA ID 	<Line: 2-2>
                declaration_list : ID 	<Line: 2-2>
                 ID : a	<Line: 2>
                COMMA : ,	<Line: 2>
                ID : b	<Line: 2>
               COMMA : ,	<Line: 2>
               ID : c	<Line: 2>
               LSQUARE : [	<Line: 2>
               CONST_INT : 3	<Line: 2>
               RSQUARE : ]	<Line: 2>
              SEMICOLON : ;	<Line: 2>
           statement : expression_statement 	<Line: 4-4>
            expression_statement : expression SEMICOLON 	<Line: 4-4>
             expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
              variable : ID 	<Line: 4-4>
               ID : a	<Line: 4>
              ASSIGNOP : =	<Line: 4>
              logic_expression : rel_expression 	<Line: 4-4>
               rel_expression : simple_expression 	<Line: 4-4>
                simple_expression : term 	<Line: 4-4>
                 term : term MULOP unary_expression 	<Line: 4-4>
                  term : term MULOP unary_expression 	<Line: 4-4>
                   term : unary_expression 	<Line: 4-4>
                    unary_expression : factor 	<Line: 4-4>
                     factor : CONST_INT 	<Line: 4-4>
                      CONST_INT : 1	<Line: 4>
                   MULOP : *	<Line: 4>
                   unary_expression : factor 	<Line: 4-4>
                    factor : LPAREN expression RPAREN 	<Line: 4-4>
                     LPAREN : (	<Line: 4>
                     expression : logic_expression 	<Line: 4-4>
                      logic_expression : rel_expression 	<Line: 4-4>
                       rel_expression : simple_expression 	<Line: 4-4>
                        simple_expression : simple_expression ADDOP term 	<Line: 4-4>
                         simple_expression : term 	<Line: 4-4>
                          term : unary_expression 	<Line: 4-4>
                           unary_expression : factor 	<Line: 4-4>
                            factor : CONST_INT 	<Line: 4-4>
                             CONST_INT : 2	<Line: 4>
                         ADDOP : +	<Line: 4>
                         term : unary_expression 	<Line: 4-4>
                          unary_expression : factor 	<Line: 4-4>
                           factor : CONST_INT 	<Line: 4-4>
                            CONST_INT : 3	<Line: 4>
                     RPAREN : )	<Line: 4>
                  MULOP : %	<Line: 4>
                  unary_expression : factor 	<Line: 4-4>
                   factor : CONST_INT 	<Line: 4-4>
                    CONST_INT : 3	<Line: 4>
             SEMICOLON : ;	<Line: 4>
          statement : expression_statement 	<Line: 5-5>
           expression_statement : expression SEMICOLON 	<Line: 5-5>
            expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
             variable : ID 	<Line: 5-5>
              ID : b	<Line: 5>
             ASSIGNOP : =	<Line: 5>
             logic_expression : rel_expression 	<Line: 5-5>
              rel_expression : simple_expression RELOP simple_expression 	<Line: 5-5>
               simple_expression : term 	<Line: 5-5>
                term : unary_expression 	<Line: 5-5>
                 unary_expression : factor 	<Line: 5-5>
                  factor : CONST_INT 	<Line: 5-5>
                   CONST_INT : 1	<Line: 5>
               RELOP : <	<Line: 5>
               simple_expression : term 	<Line: 5-5>
                term : unary_expression 	<Line: 5-5>
                 unary_expression : factor 	<Line: 5-5>
                  factor : CONST_INT 	<Line: 5-5>
                   CONST_INT : 5	<Line: 5>
            SEMICOLON : ;	<Line: 5>
         statement : expression_statement 	<Line: 6-6>
          expression_statement : expression SEMICOLON 	<Line: 6-6>
           expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
            variable : ID LSQUARE expression RSQUARE 	<Line: 6-6>
             ID : c	<Line: 6>
             LSQUARE : [	<Line: 6>
             expression : logic_expression 	<Line: 6-6>
              logic_expression : rel_expression 	<Line: 6-6>
               rel_expression : simple_expression 	<Line: 6-6>
                simple_expression : term 	<Line: 6-6>
                 term : unary_expression 	<Line: 6-6>
                  unary_expression : factor 	<Line: 6-6>
                   factor : CONST_INT 	<Line: 6-6>
                    CONST_INT : 0	<Line: 6>
             RSQUARE : ]	<Line: 6>
            ASSIGNOP : =	<Line: 6>
            logic_expression : rel_expression 	<Line: 6-6>
             rel_expression : simple_expression 	<Line: 6-6>
              simple_expression : term 	<Line: 6-6>
               term : unary_expression 	<Line: 6-6>
                unary_expression : factor 	<Line: 6-6>
                 factor : CONST_INT 	<Line: 6-6>
                  CONST_INT : 2	<Line: 6>
           SEMICOLON : ;	<Line: 6>
        statement : IF LPAREN expression RPAREN statement ELSE statement 	<Line: 7-10>
         IF : if	<Line: 7>
         LPAREN : (	<Line: 7>
         expression : logic_expression 	<Line: 7-7>
          logic_expression : rel_expression LOGICOP rel_expression 	<Line: 7-7>
           rel_expression : simple_expression 	<Line: 7-7>
            simple_expression : term 	<Line: 7-7>
             term : unary_expression 	<Line: 7-7>
              unary_expression : factor 	<Line: 7-7>
               factor : variable 	<Line: 7-7>
                variable : ID 	<Line: 7-7>
                 ID : a	<Line: 7>
           LOGICOP : &&	<Line: 7>
           rel_expression : simple_expression 	<Line: 7-7>
            simple_expression : term 	<Line: 7-7>
             term : unary_expression 	<Line: 7-7>
              unary_expression : factor 	<Line: 7-7>
               factor : variable 	<Line: 7-7>
                variable : ID 	<Line: 7-7>
                 ID : b	<Line: 7>
         RPAREN : )	<Line: 7>
         statement : expression_statement 	<Line: 8-8>
          expression_statement : expression SEMICOLON 	<Line: 8-8>
           expression : logic_expression 	<Line: 8-8>
            logic_expression : rel_expression 	<Line: 8-8>
             rel_expression : simple_expression 	<Line: 8-8>
              simple_expression : term 	<Line: 8-8>
               term : unary_expression 	<Line: 8-8>
                unary_expression : factor 	<Line: 8-8>
                 factor : variable INCOP 	<Line: 8-8>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 8-8>
                   ID : c	<Line: 8>
                   LSQUARE : [	<Line: 8>
                   expression : logic_expression 	<Line: 8-8>
                    logic_expression : rel_expression 	<Line: 8-8>
                     rel_expression : simple_expression 	<Line: 8-8>
                      simple_expression : term 	<Line: 8-8>
                       term : unary_expression 	<Line: 8-8>
                        unary_expression : factor 	<Line: 8-8>
                         factor : CONST_INT 	<Line: 8-8>
                          CONST_INT : 0	<Line: 8>
                   RSQUARE : ]	<Line: 8>
                  INCOP : ++	<Line: 8>
           SEMICOLON : ;	<Line: 8>
         ELSE : else	<Line: 9>
         statement : expression_statement 	<Line: 10-10>
          expression_statement : expression SEMICOLON 	<Line: 10-10>
           expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
            variable : ID LSQUARE expression RSQUARE 	<Line: 10-10>
             ID : c	<Line: 10>
             LSQUARE : [	<Line: 10>
             expression : logic_expression 	<Line: 10-10>
              logic_expression : rel_expression 	<Line: 10-10>
               rel_expression : simple_expression 	<Line: 10-10>
                simple_expression : term 	<Line: 10-10>
                 term : unary_expression 	<Line: 10-10>
                  unary_expression : factor 	<Line: 10-10>
                   factor : CONST_INT 	<Line: 10-10>
                    CONST_INT : 1	<Line: 10>
             RSQUARE : ]	<Line: 10>
            ASSIGNOP : =	<Line: 10>
            logic_expression : rel_expression 	<Line: 10-10>
             rel_expression : simple_expression 	<Line: 10-10>
              simple_expression : term 	<Line: 10-10>
               term : unary_expression 	<Line: 10-10>
                unary_expression : factor 	<Line: 10-10>
                 factor : variable 	<Line: 10-10>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 10-10>
                   ID : c	<Line: 10>
                   LSQUARE : [	<Line: 10>
                   expression : logic_expression 	<Line: 10-10>
                    logic_expression : rel_expression 	<Line: 10-10>
                     rel_expression : simple_expression 	<Line: 10-10>
                      simple_expression : term 	<Line: 10-10>
                       term : unary_expression 	<Line: 10-10>
                        unary_expression : factor 	<Line: 10-10>
                         factor : CONST_INT 	<Line: 10-10>
                          CONST_INT : 0	<Line: 10>
                   RSQUARE : ]	<Line: 10>
           SEMICOLON : ;	<Line: 10>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
        PRINTLN : println	<Line: 11>
        LPAREN : (	<Line: 11>
        ID : a	<Line: 11>
        RPAREN : )	<Line: 11>
        SEMICOLON : ;	<Line: 11>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 12-12>
       PRINTLN : println	<Line: 12>
       LPAREN : (	<Line: 12>
       ID : b	<Line: 12>
       RPAREN : )	<Line: 12>
       SEMICOLON : ;	<Line: 12>
     RCURL : }	<Line: 13>
