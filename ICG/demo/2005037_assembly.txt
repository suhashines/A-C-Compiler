.MODEL SMALL
.STACK 1000H
.Data
	number DB "00000$"
.CODE
f PROC
	PUSH BP
	MOV BP,SP
L2:
	SUB SP,2
L3:
	MOV AX,5
	PUSH AX
	POP AX
	MOV [BP-2],AX
L4:
	PUSH [BP-2]
	MOV AX,0
	PUSH AX
	POP BX
	POP AX
	CMP AX,BX
	JG L5
	jmp L6
L5:
	MOV AX,1
	jmp L7
L6:
	MOV AX,0
L7:
	CMP AX,1
	JGE L8
	jmp L9
L8:
	MOV AX,[BP+4]
	ADD AX,1
	MOV [BP+4],AX
	SUB AX,1
	MOV AX,[BP-2]
	SUB AX,1
	MOV [BP-2],AX
	ADD AX,1
	jmp L4
L9:
	MOV AX,3
	PUSH AX
	PUSH [BP+4]
	POP BX
	POP AX
	MUL BX
	PUSH AX
	MOV AX,7
	POP BX
	SUB BX,AX
	MOV CX,BX
	jmp L1
L10:
	MOV AX,9
	PUSH AX
	POP AX
	MOV [BP+4],AX
L1:
	ADD SP,2
	POP BP
	RET 2
g PROC
	PUSH BP
	MOV BP,SP
L12:
	SUB SP,2
	SUB SP,2
L13:
	MOV AX,[BP+6]
	PUSH AX
	CALL f
	PUSH CX
	POP AX
	ADD AX,[BP+6]
	PUSH AX
	POP AX
	ADD AX,[BP+4]
	PUSH AX
	POP AX
	MOV [BP-2],AX
L14:
	MOV AX,0
	PUSH AX
	POP AX
	MOV [BP-4],AX
L15:
	PUSH [BP-4]
	MOV AX,7
	PUSH AX
	POP BX
	POP AX
	CMP AX,BX
	JL L16
	jmp L17
L16:
	MOV AX,1
	jmp L18
L17:
	MOV AX,0
L18:
	CMP AX,1
	JGE L19
	jmp L20
L19:
	PUSH [BP-4]
	MOV AX,3
	PUSH AX
	POP BX
	POP AX
	DIV BX
	PUSH DX
	MOV AX,0
	PUSH AX
	POP BX
	POP AX
	CMP AX,BX
	JE L21
	jmp L22
L21:
	MOV AX,1
	jmp L23
L22:
	MOV AX,0
L23:
	MOV BX,AX
	CMP BX,1
	JGE L24
	jmp L25
L24:
L27:
	PUSH [BP-2]
	MOV AX,5
	POP BX
	ADD BX,AX
	PUSH BX
	POP AX
	MOV [BP-2],AX
	jmp L26
L25:
L28:
	PUSH [BP-2]
	MOV AX,1
	POP BX
	SUB BX,AX
	PUSH BX
	POP AX
	MOV [BP-2],AX
L26:
	MOV AX,[BP-4]
	ADD AX,1
	MOV [BP-4],AX
	SUB AX,1
	jmp L15
L20:
	MOV CX,[BP-2]
	jmp L11
L11:
	ADD SP,4
	POP BP
	RET 4
main PROC
	MOV AX,@DATA
	MOV DS,AX
	PUSH BP
	MOV BP,SP
L30:
	SUB SP,2
	SUB SP,2
	SUB SP,2
L31:
	MOV AX,1
	PUSH AX
	POP AX
	MOV [BP-2],AX
L32:
	MOV AX,2
	PUSH AX
	POP AX
	MOV [BP-4],AX
L33:
	MOV AX,[BP-2]
	PUSH AX
	MOV AX,[BP-4]
	PUSH AX
	CALL g
	PUSH CX
	POP AX
	MOV [BP-2],AX
L34:
	MOV AX,[BP-2]
	CALL print_output
	CALL new_line
L35:
	MOV AX,0
	PUSH AX
	POP AX
	MOV [BP-6],AX
L36:
	PUSH [BP-6]
	MOV AX,4
	PUSH AX
	POP BX
	POP AX
	CMP AX,BX
	JL L37
	jmp L38
L37:
	MOV AX,1
	jmp L39
L38:
	MOV AX,0
L39:
	CMP AX,1
	JGE L40
	jmp L41
L40:
L42:
	MOV AX,3
	PUSH AX
	POP AX
	MOV [BP-2],AX
L43:
	PUSH [BP-2]
	MOV AX,0
	PUSH AX
	POP BX
	POP AX
	CMP AX,BX
	JG L44
	jmp L45
L44:
	MOV AX,1
	jmp L46
L45:
	MOV AX,0
L46:
	CMP AX,1
	JGE L47
	jmp L48
L47:
	MOV AX,[BP-4]
	ADD AX,1
	MOV [BP-4],AX
	SUB AX,1
	MOV AX,[BP-2]
	SUB AX,1
	MOV [BP-2],AX
	ADD AX,1
	jmp L43
L48:
	MOV AX,[BP-6]
	ADD AX,1
	MOV [BP-6],AX
	SUB AX,1
	jmp L36
L41:
L49:
	MOV AX,[BP-2]
	CALL print_output
	CALL new_line
L50:
	MOV AX,[BP-4]
	CALL print_output
	CALL new_line
L51:
	MOV AX,[BP-6]
	CALL print_output
	CALL new_line
	MOV AX,0
	MOV CX,AX
	jmp L29
L29:
	ADD SP,6
	POP BP
	MOV AX,4CH
	INT 21H
main ENDP


;------print library-------;

new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
    new_line endp
print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
    print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
    negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print
    print_output endp
END main
