Line# 1: Token <INT> Lexeme int found
type_specifier : INT 
Line# 1: Token <ID> Lexeme w found
Line# 1: Token <LSQUARE> Lexeme [ found
Line# 1: Token <CONST_INT> Lexeme 10 found
Line# 1: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 1: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : unit 
Line# 3: Token <INT> Lexeme int found
type_specifier : INT 
Line# 3: Token <ID> Lexeme main found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT 
Line# 4: Token <ID> Lexeme i found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 5: Token <INT> Lexeme int found
type_specifier : INT 
Line# 5: Token <ID> Lexeme x found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <CONST_INT> Lexeme 5 found
Line# 5: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 5: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <LSQUARE> Lexeme [ found
Line# 6: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 6: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 6: Token <ASSIGNOP> Lexeme = found
Line# 6: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 7: Token <ID> Lexeme x found
Line# 7: Token <LSQUARE> Lexeme [ found
Line# 7: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 7: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 7: Token <ASSIGNOP> Lexeme = found
Line# 7: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 7: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 9: Token <IF> Lexeme if found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <LSQUARE> Lexeme [ found
Line# 9: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 9: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 9: Token <RPAREN> Lexeme ) found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 9: Token <LCURL> Lexeme { found
Line# 10: Token <ID> Lexeme i found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 10: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 10: Token <MULOP> Lexeme * found
Line# 10: Token <ID> Lexeme x found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 10: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 10: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	ScopeTable# 2
	7--> <i,INT> 
	11--> <x,ARRAY> 
	ScopeTable# 1
	10--> <w,ARRAY> 
statement : compound_statement 
Line# 11: Token <ELSE> Lexeme else found
Line# 11: Token <LCURL> Lexeme { found
Line# 12: Token <ID> Lexeme i found
Line# 12: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 12: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 12: Token <MULOP> Lexeme * found
Line# 12: Token <ID> Lexeme x found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 12: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 12: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 13: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	ScopeTable# 1
	10--> <w,ARRAY> 
statement : compound_statement 
statement : IF LAPAREN expression RPAREN statement ELSE statement 
statements : statements statement 
Line# 16: Token <PRINTLN> Lexeme println found
Line# 16: Token <LPAREN> Lexeme ( found
Line# 16: Token <ID> Lexeme i found
Line# 16: Token <RPAREN> Lexeme ) found
Line# 16: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 17: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 1
	10--> <w,ARRAY> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
Total Lines: 19
Total Errors: 4
