.MODEL SMALL
.STACK 1000H
.Data
	number DB "00000$"
	w DW 10 DUP (0000H)
.CODE
main PROC
	MOV AX,@DATA
	MOV DS,AX
	PUSH BP
	MOV BP,SP
L2:
	SUB SP,2
L3:
	SUB SP,20
L4:
	MOV AX,2
	MOV BX,AX
	NEG BX
	PUSH BX
	MOV AX,0
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV SI,AX
	POP AX
	MOV w[SI],AX
L5:
	MOV AX,0
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV SI,AX
	PUSH w[SI]
	MOV AX,0
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV BX,22
	SUB BX,AX
	MOV SI,BX
	NEG SI
	POP AX
	MOV [BP+SI],AX
L6:
	MOV AX,0
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV BX,22
	SUB BX,AX
	MOV SI,BX
	NEG SI
	PUSH [BP+SI]
	POP AX
	MOV [BP-2],AX
L7:
	MOV AX,[BP-2]
	CALL print_output
	CALL new_line
L8:
	MOV AX,0
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV SI,AX
	MOV AX,w[SI]
	ADD AX,1
	MOV w[SI],AX
	SUB AX,1
	PUSH AX
	MOV AX,1
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV BX,22
	SUB BX,AX
	MOV SI,BX
	NEG SI
	POP AX
	MOV [BP+SI],AX
L9:
	MOV AX,1
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV BX,22
	SUB BX,AX
	MOV SI,BX
	NEG SI
	PUSH [BP+SI]
	POP AX
	MOV [BP-2],AX
L10:
	MOV AX,[BP-2]
	CALL print_output
	CALL new_line
L11:
	MOV AX,0
	PUSH AX
	MOV BX,2
	POP AX
	MUL BX
	MOV SI,AX
	PUSH w[SI]
	POP AX
	MOV [BP-2],AX
L12:
	MOV AX,[BP-2]
	CALL print_output
	CALL new_line
L13:
	PUSH [BP-2]
	MOV AX,0
	POP BX
	ADD BX,AX
	PUSH BX
	POP AX
	MOV [BP-2],AX
L14:
	PUSH [BP-2]
	MOV AX,0
	POP BX
	SUB BX,AX
	PUSH BX
	POP AX
	MOV [BP-2],AX
L15:
	PUSH [BP-2]
	MOV AX,1
	PUSH AX
	POP BX
	POP AX
	MUL BX
	PUSH AX
	POP AX
	MOV [BP-2],AX
L16:
	MOV AX,[BP-2]
	CALL print_output
	CALL new_line
	MOV AX,0
	MOV CX,AX
	jmp L1
L1:
	ADD SP,22
	POP BP
	MOV AX,4CH
	INT 21H
main ENDP


;------print library-------;

new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
    new_line endp
print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
    print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
    negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print
    print_output endp
END main
