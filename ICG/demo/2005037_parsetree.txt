start : program 	<Line: 1-17>
 program : program unit 	<Line: 1-17>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
      ID : w	<Line: 1>
      LSQUARE : [	<Line: 1>
      CONST_INT : 10	<Line: 1>
      RSQUARE : ]	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 3-17>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-17>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 3-17>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-16>
      statements : statements statement 	<Line: 4-13>
       statements : statements statement 	<Line: 4-7>
        statements : statements statement 	<Line: 4-6>
         statements : statements statement 	<Line: 4-5>
          statements : statement 	<Line: 4-4>
           statement : var_declaration 	<Line: 4-4>
            var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
             type_specifier : INT 	<Line: 4-4>
              INT : int	<Line: 4>
             declaration_list : ID 	<Line: 4-4>
              ID : i	<Line: 4>
             SEMICOLON : ;	<Line: 4>
          statement : var_declaration 	<Line: 5-5>
           var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 5-5>
            type_specifier : INT 	<Line: 5-5>
             INT : int	<Line: 5>
            declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 5-5>
             ID : x	<Line: 5>
             LSQUARE : [	<Line: 5>
             CONST_INT : 5	<Line: 5>
             RSQUARE : ]	<Line: 5>
            SEMICOLON : ;	<Line: 5>
         statement : expression_statement 	<Line: 6-6>
          expression_statement : expression SEMICOLON 	<Line: 6-6>
           expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
            variable : ID LSQUARE expression RSQUARE 	<Line: 6-6>
             ID : x	<Line: 6>
             LSQUARE : [	<Line: 6>
             expression : logic_expression 	<Line: 6-6>
              logic_expression : rel_expression 	<Line: 6-6>
               rel_expression : simple_expression 	<Line: 6-6>
                simple_expression : term 	<Line: 6-6>
                 term : unary_expression 	<Line: 6-6>
                  unary_expression : factor 	<Line: 6-6>
                   factor : CONST_INT 	<Line: 6-6>
                    CONST_INT : 5	<Line: 6>
             RSQUARE : ]	<Line: 6>
            ASSIGNOP : =	<Line: 6>
            logic_expression : rel_expression 	<Line: 6-6>
             rel_expression : simple_expression 	<Line: 6-6>
              simple_expression : term 	<Line: 6-6>
               term : unary_expression 	<Line: 6-6>
                unary_expression : factor 	<Line: 6-6>
                 factor : CONST_INT 	<Line: 6-6>
                  CONST_INT : 0	<Line: 6>
           SEMICOLON : ;	<Line: 6>
        statement : expression_statement 	<Line: 7-7>
         expression_statement : expression SEMICOLON 	<Line: 7-7>
          expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
           variable : ID LSQUARE expression RSQUARE 	<Line: 7-7>
            ID : x	<Line: 7>
            LSQUARE : [	<Line: 7>
            expression : logic_expression 	<Line: 7-7>
             logic_expression : rel_expression 	<Line: 7-7>
              rel_expression : simple_expression 	<Line: 7-7>
               simple_expression : term 	<Line: 7-7>
                term : unary_expression 	<Line: 7-7>
                 unary_expression : factor 	<Line: 7-7>
                  factor : CONST_INT 	<Line: 7-7>
                   CONST_INT : 4	<Line: 7>
            RSQUARE : ]	<Line: 7>
           ASSIGNOP : =	<Line: 7>
           logic_expression : rel_expression 	<Line: 7-7>
            rel_expression : simple_expression 	<Line: 7-7>
             simple_expression : term 	<Line: 7-7>
              term : unary_expression 	<Line: 7-7>
               unary_expression : factor 	<Line: 7-7>
                factor : CONST_INT 	<Line: 7-7>
                 CONST_INT : 5	<Line: 7>
          SEMICOLON : ;	<Line: 7>
       statement : IF LPAREN expression RPAREN statement ELSE statement 	<Line: 9-13>
        IF : if	<Line: 9>
        LPAREN : (	<Line: 9>
        expression : logic_expression 	<Line: 9-9>
         logic_expression : rel_expression 	<Line: 9-9>
          rel_expression : simple_expression 	<Line: 9-9>
           simple_expression : term 	<Line: 9-9>
            term : unary_expression 	<Line: 9-9>
             unary_expression : factor 	<Line: 9-9>
              factor : variable 	<Line: 9-9>
               variable : ID LSQUARE expression RSQUARE 	<Line: 9-9>
                ID : x	<Line: 9>
                LSQUARE : [	<Line: 9>
                expression : logic_expression 	<Line: 9-9>
                 logic_expression : rel_expression 	<Line: 9-9>
                  rel_expression : simple_expression 	<Line: 9-9>
                   simple_expression : term 	<Line: 9-9>
                    term : unary_expression 	<Line: 9-9>
                     unary_expression : factor 	<Line: 9-9>
                      factor : CONST_INT 	<Line: 9-9>
                       CONST_INT : 5	<Line: 9>
                RSQUARE : ]	<Line: 9>
        RPAREN : )	<Line: 9>
        statement : compound_statement 	<Line: 9-11>
         compound_statement : LCURL statements RCURL 	<Line: 9-11>
          LCURL : {	<Line: 9>
          statements : statement 	<Line: 10-10>
           statement : expression_statement 	<Line: 10-10>
            expression_statement : expression SEMICOLON 	<Line: 10-10>
             expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
              variable : ID 	<Line: 10-10>
               ID : i	<Line: 10>
              ASSIGNOP : =	<Line: 10>
              logic_expression : rel_expression 	<Line: 10-10>
               rel_expression : simple_expression 	<Line: 10-10>
                simple_expression : term 	<Line: 10-10>
                 term : term MULOP unary_expression 	<Line: 10-10>
                  term : unary_expression 	<Line: 10-10>
                   unary_expression : factor 	<Line: 10-10>
                    factor : CONST_INT 	<Line: 10-10>
                     CONST_INT : 2	<Line: 10>
                  MULOP : *	<Line: 10>
                  unary_expression : factor 	<Line: 10-10>
                   factor : variable 	<Line: 10-10>
                    variable : ID LSQUARE expression RSQUARE 	<Line: 10-10>
                     ID : x	<Line: 10>
                     LSQUARE : [	<Line: 10>
                     expression : logic_expression 	<Line: 10-10>
                      logic_expression : rel_expression 	<Line: 10-10>
                       rel_expression : simple_expression 	<Line: 10-10>
                        simple_expression : term 	<Line: 10-10>
                         term : unary_expression 	<Line: 10-10>
                          unary_expression : factor 	<Line: 10-10>
                           factor : CONST_INT 	<Line: 10-10>
                            CONST_INT : 5	<Line: 10>
                     RSQUARE : ]	<Line: 10>
             SEMICOLON : ;	<Line: 10>
          RCURL : }	<Line: 11>
        ELSE : else	<Line: 11>
        statement : compound_statement 	<Line: 11-13>
         compound_statement : LCURL statements RCURL 	<Line: 11-13>
          LCURL : {	<Line: 11>
          statements : statement 	<Line: 12-12>
           statement : expression_statement 	<Line: 12-12>
            expression_statement : expression SEMICOLON 	<Line: 12-12>
             expression : variable ASSIGNOP logic_expression 	<Line: 12-12>
              variable : ID 	<Line: 12-12>
               ID : i	<Line: 12>
              ASSIGNOP : =	<Line: 12>
              logic_expression : rel_expression 	<Line: 12-12>
               rel_expression : simple_expression 	<Line: 12-12>
                simple_expression : term 	<Line: 12-12>
                 term : term MULOP unary_expression 	<Line: 12-12>
                  term : unary_expression 	<Line: 12-12>
                   unary_expression : factor 	<Line: 12-12>
                    factor : CONST_INT 	<Line: 12-12>
                     CONST_INT : 3	<Line: 12>
                  MULOP : *	<Line: 12>
                  unary_expression : factor 	<Line: 12-12>
                   factor : variable 	<Line: 12-12>
                    variable : ID LSQUARE expression RSQUARE 	<Line: 12-12>
                     ID : x	<Line: 12>
                     LSQUARE : [	<Line: 12>
                     expression : logic_expression 	<Line: 12-12>
                      logic_expression : rel_expression 	<Line: 12-12>
                       rel_expression : simple_expression 	<Line: 12-12>
                        simple_expression : term 	<Line: 12-12>
                         term : unary_expression 	<Line: 12-12>
                          unary_expression : factor 	<Line: 12-12>
                           factor : CONST_INT 	<Line: 12-12>
                            CONST_INT : 4	<Line: 12>
                     RSQUARE : ]	<Line: 12>
             SEMICOLON : ;	<Line: 12>
          RCURL : }	<Line: 13>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>
       PRINTLN : println	<Line: 16>
       LPAREN : (	<Line: 16>
       ID : i	<Line: 16>
       RPAREN : )	<Line: 16>
       SEMICOLON : ;	<Line: 16>
     RCURL : }	<Line: 17>
