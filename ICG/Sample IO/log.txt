Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme arr found
Line# 1: Token <LSQUARE> Lexeme [ found
Line# 1: Token <CONST_INT> Lexeme 5 found
Line# 1: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 1: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : unit 
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 3: Token <ID> Lexeme f found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 3: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 3: Token <COMMA> Lexeme , found
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 3: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 3: Token <COMMA> Lexeme , found
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 3: Token <ID> Lexeme c found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 3: Token <RPAREN> Lexeme ) found
Line# 4: Token <LCURL> Lexeme { found
Line# 5: Token <PRINTLN> Lexeme println found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme a found
Line# 5: Token <RPAREN> Lexeme ) found
Line# 5: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement  
Line# 6: Token <PRINTLN> Lexeme println found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <ID> Lexeme b found
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 7: Token <PRINTLN> Lexeme println found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <ID> Lexeme c found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 8: Token <ID> Lexeme arr found
Line# 8: Token <LSQUARE> Lexeme [ found
Line# 8: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 8: Token <ASSIGNOP> Lexeme = found
Line# 8: Token <CONST_INT> Lexeme 441 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 9: Token <ID> Lexeme arr found
Line# 9: Token <LSQUARE> Lexeme [ found
Line# 9: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 9: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 9: Token <ASSIGNOP> Lexeme = found
Line# 9: Token <CONST_INT> Lexeme 555 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 10: Token <ID> Lexeme b found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 10: Token <ID> Lexeme arr found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 10: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme b found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 12: Token <RETURN> Lexeme return found
Line# 12: Token <ID> Lexeme arr found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 12: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 12: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 13: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	1 --> <c, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 2>








	10 --> <a, INT, Width: 2, Offset: 8, IsParam: 1, Scope: 2>
	11 --> <b, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 2>
	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT>


	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>





	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme recursive found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme n found
parameter_list  : type_specifier ID
Line# 14: Token <RPAREN> Lexeme ) found
Line# 15: Token <LCURL> Lexeme { found
Line# 16: Token <IF> Lexeme if found
Line# 16: Token <LPAREN> Lexeme ( found
Line# 16: Token <ID> Lexeme n found
Line# 16: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 16: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 16: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 17: Token <RETURN> Lexeme return found
Line# 17: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
Line# 18: Token <IF> Lexeme if found
IF LPAREN expression RPAREN statement %prec THEN
statements : statement  
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme n found
Line# 18: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 18: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 18: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 19: Token <RETURN> Lexeme return found
Line# 19: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 19: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
Line# 20: Token <RETURN> Lexeme return found
IF LPAREN expression RPAREN statement %prec THEN
statements : statements statement  
Line# 20: Token <ID> Lexeme recursive found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme n found
Line# 20: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 20: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 20: Token <ID> Lexeme recursive found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme n found
Line# 20: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 20: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 21: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3
	1 --> <n, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 3>










	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT> --> <recursive, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>


	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>





	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 23: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 23: Token <ID> Lexeme v found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <RPAREN> Lexeme ) found
Line# 24: Token <LCURL> Lexeme { found
Line# 25: Token <ID> Lexeme a found
Line# 25: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 25: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 26: Token <IF> Lexeme if found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <ID> Lexeme a found
Line# 26: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 27: Token <LCURL> Lexeme { found
Line# 28: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 28: Token <ID> Lexeme a found
Line# 28: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 29: Token <ID> Lexeme a found
Line# 29: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 29: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 29: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 30: Token <PRINTLN> Lexeme println found
Line# 30: Token <LPAREN> Lexeme ( found
Line# 30: Token <ID> Lexeme a found
Line# 30: Token <RPAREN> Lexeme ) found
Line# 30: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 31: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 5









	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 5>

	ScopeTable# 4











	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT> --> <recursive, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>


	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>




	9 --> <v, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID>
	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

statement : compound_statement 
Line# 32: Token <PRINTLN> Lexeme println found
IF LPAREN expression RPAREN statement %prec THEN
statements : statements statement  
Line# 32: Token <LPAREN> Lexeme ( found
Line# 32: Token <ID> Lexeme a found
Line# 32: Token <RPAREN> Lexeme ) found
Line# 32: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 33: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 4











	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT> --> <recursive, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>


	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>




	9 --> <v, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID>
	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
Line# 35: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 35: Token <ID> Lexeme main found
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <RPAREN> Lexeme ) found
Line# 36: Token <LCURL> Lexeme { found
Line# 37: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 37: Token <ID> Lexeme i found
Line# 37: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 37: Token <ID> Lexeme j found
Line# 37: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 37: Token <ID> Lexeme k found
Line# 37: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 37: Token <ID> Lexeme a found
Line# 37: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 37: Token <ID> Lexeme array found
Line# 37: Token <LSQUARE> Lexeme [ found
Line# 37: Token <CONST_INT> Lexeme 5 found
Line# 37: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 37: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 38: Token <ID> Lexeme a found
Line# 38: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 38: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 38: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 39: Token <ID> Lexeme v found
Line# 39: Token <LPAREN> Lexeme ( found
Line# 39: Token <RPAREN> Lexeme ) found
factor	: ID LPAREN RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 39: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 40: Token <PRINTLN> Lexeme println found
Line# 40: Token <LPAREN> Lexeme ( found
Line# 40: Token <ID> Lexeme a found
Line# 40: Token <RPAREN> Lexeme ) found
Line# 40: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 41: Token <FOR> Lexeme for found
Line# 41: Token <LPAREN> Lexeme ( found
Line# 41: Token <ID> Lexeme i found
Line# 41: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 41: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 41: Token <ID> Lexeme i found
Line# 41: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 41: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 41: Token <ID> Lexeme i found
Line# 41: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 42: Token <LCURL> Lexeme { found
Line# 43: Token <ID> Lexeme array found
Line# 43: Token <LSQUARE> Lexeme [ found
Line# 43: Token <ID> Lexeme i found
Line# 43: Token <RSQUARE> Lexeme ] found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 43: Token <ASSIGNOP> Lexeme = found
Line# 43: Token <ID> Lexeme i found
Line# 43: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 43: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 43: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 44: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 7











	ScopeTable# 6






	7 --> <i, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 6>
	8 --> <j, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 6>
	9 --> <k, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 6>
	10 --> <a, INT, Width: 2, Offset: 8, IsParam: 0, Scope: 6> --> <array, ARRAY, Width: 10, Offset: 18, IsParam: 0, Scope: 6, Base Type: INT>

	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT> --> <recursive, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>




	9 --> <v, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID>
	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement  
Line# 45: Token <ID> Lexeme i found
Line# 45: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 45: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 45: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 46: Token <WHILE> Lexeme while found
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <ID> Lexeme i found
Line# 46: Token <DECOP> Lexeme -- found
variable : ID 	 
factor	: variable DECOP  
unary_expression : factor 
term :	unary_expression 
Line# 46: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 47: Token <LCURL> Lexeme { found
Line# 48: Token <ID> Lexeme j found
Line# 48: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 48: Token <ID> Lexeme array found
Line# 48: Token <LSQUARE> Lexeme [ found
Line# 48: Token <ID> Lexeme i found
Line# 48: Token <RSQUARE> Lexeme ] found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 48: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 49: Token <PRINTLN> Lexeme println found
Line# 49: Token <LPAREN> Lexeme ( found
Line# 49: Token <ID> Lexeme j found
Line# 49: Token <RPAREN> Lexeme ) found
Line# 49: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 50: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 8











	ScopeTable# 6






	7 --> <i, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 6>
	8 --> <j, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 6>
	9 --> <k, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 6>
	10 --> <a, INT, Width: 2, Offset: 8, IsParam: 0, Scope: 6> --> <array, ARRAY, Width: 10, Offset: 18, IsParam: 0, Scope: 6, Base Type: INT>

	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT> --> <recursive, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>




	9 --> <v, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID>
	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement  
Line# 51: Token <ID> Lexeme k found
Line# 51: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 51: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 51: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 52: Token <IF> Lexeme if found
Line# 52: Token <LPAREN> Lexeme ( found
Line# 52: Token <ID> Lexeme k found
Line# 52: Token <RELOP> Lexeme > found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 52: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 52: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 53: Token <ID> Lexeme k found
Line# 53: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 53: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
Line# 54: Token <ELSE> Lexeme else found
Line# 55: Token <ID> Lexeme k found
Line# 55: Token <DECOP> Lexeme -- found
variable : ID 	 
factor	: variable DECOP  
unary_expression : factor 
term :	unary_expression 
Line# 55: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statements statement  
Line# 56: Token <PRINTLN> Lexeme println found
Line# 56: Token <LPAREN> Lexeme ( found
Line# 56: Token <ID> Lexeme k found
Line# 56: Token <RPAREN> Lexeme ) found
Line# 56: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 57: Token <ID> Lexeme k found
Line# 57: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 57: Token <ADDOP> Lexeme - found
Line# 57: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
unary_expression : ADDOP unary_expression  
term :	unary_expression 
Line# 57: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 58: Token <IF> Lexeme if found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme k found
Line# 58: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 58: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 58: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 59: Token <ID> Lexeme k found
Line# 59: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 59: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
Line# 60: Token <ELSE> Lexeme else found
Line# 61: Token <ID> Lexeme k found
Line# 61: Token <DECOP> Lexeme -- found
variable : ID 	 
factor	: variable DECOP  
unary_expression : factor 
term :	unary_expression 
Line# 61: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statements statement  
Line# 62: Token <PRINTLN> Lexeme println found
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme k found
Line# 62: Token <RPAREN> Lexeme ) found
Line# 62: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 63: Token <ID> Lexeme k found
Line# 63: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 63: Token <CONST_INT> Lexeme 121 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 63: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 64: Token <ID> Lexeme k found
Line# 64: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 64: Token <ADDOP> Lexeme - found
Line# 64: Token <ID> Lexeme k found
Line# 64: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
unary_expression : ADDOP unary_expression  
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 65: Token <ID> Lexeme i found
Line# 65: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 65: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 65: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 66: Token <ID> Lexeme k found
Line# 66: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 66: Token <ID> Lexeme i found
Line# 66: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 66: Token <ID> Lexeme k found
Line# 66: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 67: Token <PRINTLN> Lexeme println found
Line# 67: Token <LPAREN> Lexeme ( found
Line# 67: Token <ID> Lexeme k found
Line# 67: Token <RPAREN> Lexeme ) found
Line# 67: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 68: Token <ID> Lexeme k found
Line# 68: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 68: Token <ADDOP> Lexeme - found
Line# 68: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
unary_expression : ADDOP unary_expression  
term :	unary_expression 
Line# 68: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 69: Token <ID> Lexeme k found
Line# 69: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 69: Token <ID> Lexeme k found
Line# 69: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 69: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 69: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 70: Token <PRINTLN> Lexeme println found
Line# 70: Token <LPAREN> Lexeme ( found
Line# 70: Token <ID> Lexeme k found
Line# 70: Token <RPAREN> Lexeme ) found
Line# 70: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 71: Token <ID> Lexeme j found
Line# 71: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 71: Token <CONST_INT> Lexeme 19 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 71: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 72: Token <ID> Lexeme i found
Line# 72: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 72: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 72: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 73: Token <ID> Lexeme k found
Line# 73: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 73: Token <ID> Lexeme j found
Line# 73: Token <MULOP> Lexeme / found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 73: Token <ID> Lexeme i found
Line# 73: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 74: Token <PRINTLN> Lexeme println found
Line# 74: Token <LPAREN> Lexeme ( found
Line# 74: Token <ID> Lexeme k found
Line# 74: Token <RPAREN> Lexeme ) found
Line# 74: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 75: Token <ID> Lexeme k found
Line# 75: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 75: Token <ID> Lexeme j found
Line# 75: Token <MULOP> Lexeme % found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 75: Token <ID> Lexeme i found
Line# 75: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 76: Token <PRINTLN> Lexeme println found
Line# 76: Token <LPAREN> Lexeme ( found
Line# 76: Token <ID> Lexeme k found
Line# 76: Token <RPAREN> Lexeme ) found
Line# 76: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 77: Token <ID> Lexeme k found
Line# 77: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 77: Token <ID> Lexeme f found
Line# 77: Token <LPAREN> Lexeme ( found
Line# 77: Token <CONST_INT> Lexeme 111 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 77: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 77: Token <CONST_INT> Lexeme 222 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 77: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 77: Token <CONST_INT> Lexeme 333 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 77: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 77: Token <ADDOP> Lexeme - found
simple_expression : term 
Line# 77: Token <CONST_INT> Lexeme 444 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 77: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 78: Token <PRINTLN> Lexeme println found
Line# 78: Token <LPAREN> Lexeme ( found
Line# 78: Token <ID> Lexeme k found
Line# 78: Token <RPAREN> Lexeme ) found
Line# 78: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 79: Token <ID> Lexeme k found
Line# 79: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 79: Token <ID> Lexeme recursive found
Line# 79: Token <LPAREN> Lexeme ( found
Line# 79: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 79: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 79: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 80: Token <PRINTLN> Lexeme println found
Line# 80: Token <LPAREN> Lexeme ( found
Line# 80: Token <ID> Lexeme k found
Line# 80: Token <RPAREN> Lexeme ) found
Line# 80: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 81: Token <ID> Lexeme k found
Line# 81: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 81: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 81: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 82: Token <ID> Lexeme i found
Line# 82: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 82: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 82: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 83: Token <ID> Lexeme j found
Line# 83: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 83: Token <ID> Lexeme i found
Line# 83: Token <LOGICOP> Lexeme || found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
Line# 83: Token <ID> Lexeme k found
Line# 83: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 84: Token <PRINTLN> Lexeme println found
Line# 84: Token <LPAREN> Lexeme ( found
Line# 84: Token <ID> Lexeme j found
Line# 84: Token <RPAREN> Lexeme ) found
Line# 84: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 85: Token <ID> Lexeme j found
Line# 85: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 85: Token <ID> Lexeme i found
Line# 85: Token <LOGICOP> Lexeme && found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
Line# 85: Token <ID> Lexeme k found
Line# 85: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 86: Token <PRINTLN> Lexeme println found
Line# 86: Token <LPAREN> Lexeme ( found
Line# 86: Token <ID> Lexeme j found
Line# 86: Token <RPAREN> Lexeme ) found
Line# 86: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 87: Token <ID> Lexeme k found
Line# 87: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 87: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 87: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 88: Token <ID> Lexeme i found
Line# 88: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 88: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 88: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 89: Token <ID> Lexeme j found
Line# 89: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 89: Token <ID> Lexeme i found
Line# 89: Token <LOGICOP> Lexeme || found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
Line# 89: Token <ID> Lexeme k found
Line# 89: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 90: Token <PRINTLN> Lexeme println found
Line# 90: Token <LPAREN> Lexeme ( found
Line# 90: Token <ID> Lexeme j found
Line# 90: Token <RPAREN> Lexeme ) found
Line# 90: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 91: Token <ID> Lexeme j found
Line# 91: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 91: Token <ID> Lexeme i found
Line# 91: Token <LOGICOP> Lexeme && found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
Line# 91: Token <ID> Lexeme k found
Line# 91: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 92: Token <PRINTLN> Lexeme println found
Line# 92: Token <LPAREN> Lexeme ( found
Line# 92: Token <ID> Lexeme j found
Line# 92: Token <RPAREN> Lexeme ) found
Line# 92: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 93: Token <ID> Lexeme j found
Line# 93: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 93: Token <LOGICOP> Lexeme ! found
Line# 93: Token <ID> Lexeme k found
Line# 93: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
unary_expression : NOT unary_expression  
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 94: Token <PRINTLN> Lexeme println found
Line# 94: Token <LPAREN> Lexeme ( found
Line# 94: Token <ID> Lexeme j found
Line# 94: Token <RPAREN> Lexeme ) found
Line# 94: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 95: Token <ID> Lexeme j found
Line# 95: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 95: Token <LOGICOP> Lexeme ! found
Line# 95: Token <ID> Lexeme j found
Line# 95: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
unary_expression : NOT unary_expression  
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 96: Token <PRINTLN> Lexeme println found
Line# 96: Token <LPAREN> Lexeme ( found
Line# 96: Token <ID> Lexeme j found
Line# 96: Token <RPAREN> Lexeme ) found
Line# 96: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 97: Token <ID> Lexeme j found
Line# 97: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 97: Token <CONST_INT> Lexeme 12 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 97: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <MULOP> Lexeme / found
Line# 97: Token <CONST_INT> Lexeme 89 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 97: Token <MULOP> Lexeme % found
Line# 97: Token <LPAREN> Lexeme ( found
Line# 97: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <ADDOP> Lexeme - found
simple_expression : term 
Line# 97: Token <CONST_INT> Lexeme 33 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 97: Token <CONST_INT> Lexeme 64 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <MULOP> Lexeme * found
Line# 97: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 97: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 97: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term  
Line# 97: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 97: Token <LPAREN> Lexeme ( found
Line# 97: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 97: Token <CONST_INT> Lexeme 59 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <MULOP> Lexeme / found
Line# 97: Token <CONST_INT> Lexeme 9 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 97: Token <MULOP> Lexeme * found
Line# 97: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 97: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term  
Line# 97: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 97: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 98: Token <PRINTLN> Lexeme println found
Line# 98: Token <LPAREN> Lexeme ( found
Line# 98: Token <ID> Lexeme j found
Line# 98: Token <RPAREN> Lexeme ) found
Line# 98: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 100: Token <RETURN> Lexeme return found
Line# 100: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 100: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 101: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 6






	7 --> <i, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 6>
	8 --> <j, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 6>
	9 --> <k, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 6>
	10 --> <a, INT, Width: 2, Offset: 8, IsParam: 0, Scope: 6> --> <array, ARRAY, Width: 10, Offset: 18, IsParam: 0, Scope: 6, Base Type: INT>

	ScopeTable# 1
	1 --> <arr, ARRAY, Width: 10, Offset: 12, IsParam: 0, Scope: 1, Base Type: INT> --> <recursive, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 6, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>




	9 --> <v, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID>
	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>

func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
start : program 

Total Lines: 101

Total Errors: 0
